1. в отличие от GitHub, являющегоя просто сервером, предоставляющим место для удаленного репозитория, git -- это система контроля версий, в которой локальный репозиторий является полной копией удаленного и в нем правки можно вносить без непрерывного обновления удаленного репозитория.
2. git и подобные ему системы в больших проектах удобно использовать, чтобы все пользователи имели возможность вносить правки или писать новый код независимо друг от друга, а затем сверять версию своего локального репозитория с удаленным и получать доступ к последней актуальной версии
3. 1) merge и rebase -- способы "сшивать" ветки главной версии, fork и pull_request -- модель, с помощью которой сперва создается копия удаленного репозитория и в ней совершаются изменения, которые затем запросом на внесение их в главную версию отправляются к "хозяевам" проекта и те на свое усмотрение могут их учесть или нет.
2) clone -- создание копии удаленного репозитория
3) commit -- сохранение изменений, совершенный в локальном репозитории
4) pull -- "подтягивание" актуальной версии с удаленного репозитория на локальный, push --  с локального на удаленный
4. различные ветки проекта создаются, например, когда несколько человек работают над тем, чтобы поймать баги в коде, и часть людей может также добавлять какие-то новые дополнения. после все ветки сшиваются в одну версию и на выходе получается новая версия удаленного репозитория.
5. merge создает сохранение отдельных изменений и сохранение совокупности изменений, то есть по сути создает историю изменений.
rebase применяет все совершенные изменения на целевую ветку (объединяет в один commit все изменения в данной ветке), записывая их поверх того, что было в главной ветке, и перезаписывает историю (вот и главный минус). преимущества: упрощает историю, объединяя несколько commit'ов в один, обеспечена линейность истории; недостатки: из-за переписывания истории commit'ов тяжело отследить, если возникла проблема, в каком commit'е это произошло, плюс случайно можно заменить какие-то важные участки кода без возможности их вернуть.
6. централизованные СКВ отличаются от децентрализованных тем, что в централизованных есть сервер, с которым взаимодействуют пользователи, не имеющие возможности взаимодействовать друг с другом, и, соответственно, видят только свои истории изменений версии одного проекта. в децентрализованных етсь удаленный репозиторий, через который пользователи взаимодействуют друг с другом, и к нему, в отличие от централизованных СКВ, не нужно непрерывное подключение через Интернет, т.к. для внесения изменений нужно посылать команду commit.